from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaPhoto

from src.bot.filters.user import CallBackCategoriesListFilter, ProductMenuFilter
from src.bot.structures.keyboards.admin_kb import get_categories_ikb, requests_add_status_moderator
from src.bot.structures.keyboards.user_kb import create_main_user_kb, create_product_kb
from src.bot.structures.lexicon.lexicon_ru import create_text_product
from src.bot.structures.states.user import UserFSM
from src.configuration import conf
from src.db.database import Database

router = Router()


# –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ =========================================================
@router.message(F.text == '–ü–æ–ª—É—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ üôá')
async def request_status_moderator(message: Message, bot: Bot, db: Database):
    user = await db.user.get_by_user_id(user_id=message.from_user.id)
    if user.request_status_moder == 1:
        return await message.answer(
            '–í–∞–º —É–∂–µ –æ—Ç–∫–∞–∑–∞–ª–∏! –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É,'
            ' —á—Ç–æ–±—ã –æ–Ω –¥–æ–±–∞–≤–∏–ª –¥–ª—è –≤–∞—Å —Ä–æ–ª—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ø–æ –æ—à–∏–±–∫–µ',
            reply_markup=await create_main_user_kb(user=user)
        )

    await message.answer('–í–∞–º –ø—Ä–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∏–ª–∏ –æ—Ç–∫–∞–∑–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏\n–û–∂–∏–¥–∞–π—Ç–µ')

    text = (f'–í–∞–º –ø—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n'
            f'  id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.user_id}\n'
            f'  username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.user_name}')

    await bot.send_message(
        chat_id=conf.admin.admin_id,
        text=text,
        reply_markup=await requests_add_status_moderator(user.user_id)
    )


# –ü–æ–ø—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ç—É—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ =========================================================


# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π =====================================================================
@router.message(F.text == '–ö–∞—Ç–∞–ª–æ–≥')
async def user_menu(message: Message, state: FSMContext, db: Database):
    await state.set_state(UserFSM.catalog)
    categories = await db.category.get_categories()
    await message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞',
        reply_markup=await get_categories_ikb(categories=categories)
    )


# –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π =====================================================================


# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===========================================================
@router.callback_query(CallBackCategoriesListFilter.filter(), UserFSM.catalog)
async def product_list(call: CallbackQuery, state: FSMContext, db: Database, bot: Bot):
    await call.answer()
    await call.message.delete()
    category_name = call.data[9:]
    await state.set_state(UserFSM.product)
    products = await db.product.get_products(category_name=category_name)
    for product in products:

        caption = await create_text_product(
                name=product.name,
                description=product.description,
                price=product.price,
                volume=product.volume
            )

        photo = await db.image.get_by_product_fk(product_fk=product.id)

        await bot.send_photo(
            chat_id=call.from_user.id,
            photo=photo,
            caption=caption,
            reply_markup=await create_product_kb(product_name=product.name)
        )


# –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===========================================================


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É ==========================================================
@router.callback_query(ProductMenuFilter.filter(), UserFSM.product)
async def add_product_in_basket(call: CallbackQuery):
    await call.answer()
    await call.message.delete()
    data = call.data[13:]
    await call.message.answer(f'—Ç–æ–≤–∞—Ä: {data} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!')


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É ==========================================================


@router.message()
async def error_message(message: Message):
    await message.answer('–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞!')
